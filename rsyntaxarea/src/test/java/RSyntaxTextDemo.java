import com.github.weisj.darklaf.LafManager;
import com.github.weisj.darklaf.components.OverlayScrollPane;
import com.github.weisj.darklaf.extensions.rsyntaxarea.DarkRSyntaxTheme;
import com.github.weisj.darklaf.theme.event.ThemeInstalledListener;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rtextarea.RTextScrollPane;
import ui.ComponentDemo;

import javax.swing.*;

public class RSyntaxTextDemo implements ComponentDemo {

    public static void main(String[] args) {
        ComponentDemo.showDemo(new RSyntaxTextDemo());
    }

    @Override
    public JComponent createComponent() {
        RSyntaxTextArea textArea = new RSyntaxTextArea(code);
        textArea.setWhitespaceVisible(true);
        textArea.setCodeFoldingEnabled(true);
        textArea.setSyntaxEditingStyle("text/java");
        RTextScrollPane sp = new RTextScrollPane(textArea);
        OverlayScrollPane overlayScrollPane = new OverlayScrollPane(sp);
        DarkRSyntaxTheme syntaxTheme = new DarkRSyntaxTheme(textArea, textArea.getSyntaxScheme());
        syntaxTheme.apply(textArea);
        LafManager.addThemeChangeListener((ThemeInstalledListener) e -> syntaxTheme.apply(textArea));
        return overlayScrollPane;
    }

    @Override
    public String getTitle() {
        return "RSyntaxArea Demo";
    }

    private final static String code = "/*\n"
                                       + " * MIT License\n"
                                       + " *\n"
                                       + " * Copyright (c) 2020 Jannis Weis\n"
                                       + " *\n"
                                       + " * Permission is hereby granted, free of charge, to any person obtaining a copy\n"
                                       + " * of this software and associated documentation files (the \"Software\"), to deal\n"
                                       + " * in the Software without restriction, including without limitation the rights\n"
                                       + " * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n"
                                       + " * copies of the Software, and to permit persons to whom the Software is\n"
                                       + " * furnished to do so, subject to the following conditions:\n"
                                       + " *\n"
                                       + " * The above copyright notice and this permission notice shall be included in all\n"
                                       + " * copies or substantial portions of the Software.\n"
                                       + " *\n"
                                       + " * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n"
                                       + " * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n"
                                       + " * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n"
                                       + " * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n"
                                       + " * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n"
                                       + " * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n"
                                       + " * SOFTWARE.\n"
                                       + " *\n"
                                       + " */\n"
                                       + "package com.github.weisj.darklaf;\n"
                                       + "\n"
                                       + "import java.awt.*;\n"
                                       + "import java.util.ArrayList;\n"
                                       + "import java.util.Arrays;\n"
                                       + "import java.util.Collection;\n"
                                       + "import java.util.List;\n"
                                       + "import java.util.logging.Level;\n"
                                       + "\n"
                                       + "import javax.swing.*;\n"
                                       + "\n"
                                       + "import com.github.weisj.darklaf.platform.DecorationsHandler;\n"
                                       + "import com.github.weisj.darklaf.platform.ThemePreferencesHandler;\n"
                                       + "import com.github.weisj.darklaf.settings.ThemeSettings;\n"
                                       + "import com.github.weisj.darklaf.task.DefaultsAdjustmentTask;\n"
                                       + "import com.github.weisj.darklaf.task.DefaultsInitTask;\n"
                                       + "import com.github.weisj.darklaf.theme.*;\n"
                                       + "import com.github.weisj.darklaf.theme.event.*;\n"
                                       + "import com.github.weisj.darklaf.theme.info.DefaultThemeProvider;\n"
                                       + "import com.github.weisj.darklaf.theme.info.PreferredThemeStyle;\n"
                                       + "import com.github.weisj.darklaf.theme.info.ThemeProvider;\n"
                                       + "import com.github.weisj.darklaf.util.LogUtil;\n"
                                       + "\n"
                                       + "/**\n"
                                       + " * Manager for the Look and Feel.\n"
                                       + " *\n"
                                       + " * @author Jannis Weis\n"
                                       + " */\n"
                                       + "public final class LafManager {\n"
                                       + "\n"
                                       + "    private static ThemeProvider themeProvider;\n"
                                       + "    private static Theme theme;\n"
                                       + "    private static final List<Theme> registeredThemes = new ArrayList<>();\n"
                                       + "    private static final Collection<DefaultsAdjustmentTask> uiDefaultsTasks = new ArrayList<>();\n"
                                       + "    private static final Collection<DefaultsInitTask> uiInitTasks = new ArrayList<>();\n"
                                       + "    private static final ThemeEventSupport<ThemeChangeEvent, ThemeChangeListener> eventSupport = new ThemeEventSupport<>();\n"
                                       + "\n"
                                       + "    static {\n"
                                       + "        setLogLevel(Level.INFO);\n"
                                       + "        registerTheme(new IntelliJTheme(),\n"
                                       + "                      new DarculaTheme(),\n"
                                       + "                      new SolarizedLightTheme(),\n"
                                       + "                      new SolarizedDarkTheme(),\n"
                                       + "                      new OneDarkTheme(),\n"
                                       + "                      new HighContrastLightTheme(),\n"
                                       + "                      new HighContrastDarkTheme());\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Enable logging for the Look and Feel.\n"
                                       + "     * true means Level.INFO, false Level.SEVERE.\n"
                                       + "     *\n"
                                       + "     * @see              #setLogLevel(Level)\n"
                                       + "     * @param logEnabled true if messages should be logged.\n"
                                       + "     */\n"
                                       + "    public static void enableLogging(final boolean logEnabled) {\n"
                                       + "        setLogLevel(logEnabled ? Level.INFO : Level.SEVERE);\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Sets the log level.\n"
                                       + "     *\n"
                                       + "     * @param level the new log level.\n"
                                       + "     */\n"
                                       + "    public static void setLogLevel(final Level level) {\n"
                                       + "        LogUtil.setLevel(level);\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Returns whether custom decorations should be used. If this returns true decorations still might not be used if\n"
                                       + "     * the theme or platform don't support them.\n"
                                       + "     *\n"
                                       + "     * @return true if decorations should be used.\n"
                                       + "     */\n"
                                       + "    public static boolean isDecorationsEnabled() {\n"
                                       + "        return DecorationsHandler.getSharedInstance().isCustomDecorationSupported();\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Set globally whether decorations are enabled. By default, this is true. Decorations are used if this value is set\n"
                                       + "     * to true and the current platform and theme support custom decorations.\n"
                                       + "     *\n"
                                       + "     * @param enabled true if decorations should be used if available.\n"
                                       + "     */\n"
                                       + "    public static void setDecorationsEnabled(final boolean enabled) {\n"
                                       + "        boolean isEnabled = isDecorationsEnabled();\n"
                                       + "        DecorationsHandler.getSharedInstance().setDecorationsEnabled(enabled);\n"
                                       + "        if (isEnabled != enabled) {\n"
                                       + "            updateLaf();\n"
                                       + "        }\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Enabled whether changes in the preferred theme style should be reported to {@link ThemePreferenceListener}s. On\n"
                                       + "     * some platforms this setting may do nothing.\n"
                                       + "     * <p>\n"
                                       + "     * Warning: If preference reporting is enabled it <b>needs</b> to be disabled before closing the program. Not doing\n"
                                       + "     * so can result in memory leaks and prevent the classloader from being garbage collected.\n"
                                       + "     *\n"
                                       + "     * @param enabled true if changes should be reported.\n"
                                       + "     */\n"
                                       + "    public static void enabledPreferenceChangeReporting(final boolean enabled) {\n"
                                       + "        ThemePreferencesHandler.getSharedInstance().enablePreferenceChangeReporting(enabled);\n"
                                       + "        if (ThemeSettings.isInitialized()) ThemeSettings.getInstance().setEnabledSystemPreferences(enabled);\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Returns whether changes to the preferred theme style should be reported to {@link ThemePreferenceListener}s.\n"
                                       + "     *\n"
                                       + "     * @return true if enabled and currently reporting.\n"
                                       + "     */\n"
                                       + "    public static boolean isPreferenceChangeReportingEnabled() {\n"
                                       + "        return ThemePreferencesHandler.getSharedInstance().isPreferenceChangeReportingEnabled();\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Adds a {@link ThemePreferenceListener}. If preference change reporting is enabled the handler will receive events\n"
                                       + "     * if preferences have changed.\n"
                                       + "     *\n"
                                       + "     * @param listener the listener to add.\n"
                                       + "     * @see            ThemePreferenceListener\n"
                                       + "     * @see            #enabledPreferenceChangeReporting(boolean)\n"
                                       + "     * @see            #isPreferenceChangeReportingEnabled()\n"
                                       + "     */\n"
                                       + "    public static void addThemePreferenceChangeListener(final ThemePreferenceListener listener) {\n"
                                       + "        ThemePreferencesHandler.getSharedInstance().addThemePreferenceChangeListener(listener);\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Removes a {@link ThemePreferenceListener}.\n"
                                       + "     *\n"
                                       + "     * @param listener the listener to remove.\n"
                                       + "     * @see            ThemePreferenceListener\n"
                                       + "     * @see            #enabledPreferenceChangeReporting(boolean)\n"
                                       + "     * @see            #isPreferenceChangeReportingEnabled()\n"
                                       + "     */\n"
                                       + "    public static void removeThemePreferenceChangeListener(final ThemePreferenceListener listener) {\n"
                                       + "        ThemePreferencesHandler.getSharedInstance().removeThemePreferenceChangeListener(listener);\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Adds a {@link ThemeChangeListener}. The listener will receive events if the theme is changed.\n"
                                       + "     *\n"
                                       + "     * @param listener the listener to add.\n"
                                       + "     */\n"
                                       + "    public static void addThemeChangeListener(final ThemeChangeListener listener) {\n"
                                       + "        eventSupport.addListener(listener);\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Removes a {@link ThemeChangeListener}.\n"
                                       + "     *\n"
                                       + "     * @param listener the listener to add.\n"
                                       + "     */\n"
                                       + "    public static void removeThemeChangeListener(final ThemeChangeListener listener) {\n"
                                       + "        eventSupport.removeListener(listener);\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Gets the preferred theme style. If theme preference change reporting is enabled this may use native os settings\n"
                                       + "     * to determine these values.\n"
                                       + "     *\n"
                                       + "     * @return the preferred theme style.\n"
                                       + "     * @see    #isPreferenceChangeReportingEnabled()\n"
                                       + "     * @see    #enabledPreferenceChangeReporting(boolean)\n"
                                       + "     */\n"
                                       + "    public static PreferredThemeStyle getPreferredThemeStyle() {\n"
                                       + "        return ThemePreferencesHandler.getSharedInstance().getPreferredThemeStyle();\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Get the current theme provider. The theme provider is responsible the produce available themes for a given\n"
                                       + "     * preferred theme style.\n"
                                       + "     *\n"
                                       + "     * @return the theme provider.\n"
                                       + "     * @see    PreferredThemeStyle\n"
                                       + "     */\n"
                                       + "    public static ThemeProvider getThemeProvider() {\n"
                                       + "        if (themeProvider == null) themeProvider = createDefaultThemeProvider();\n"
                                       + "        return themeProvider;\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Set the current theme provider. The theme provider is responsible the produce available themes for a given\n"
                                       + "     * preferred theme style.\n"
                                       + "     *\n"
                                       + "     * @param themeProvider the theme provider.\n"
                                       + "     * @see                 PreferredThemeStyle\n"
                                       + "     */\n"
                                       + "    public static void setThemeProvider(final ThemeProvider themeProvider) {\n"
                                       + "        LafManager.themeProvider = themeProvider;\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /*\n"
                                       + "     * Default theme provider. Defaults to IntelliJ/Darcula Light/Dark high contrast themes.\n"
                                       + "     */\n"
                                       + "    private static ThemeProvider createDefaultThemeProvider() {\n"
                                       + "        return new DefaultThemeProvider();\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Get the associated theme for the given preferred style.\n"
                                       + "     *\n"
                                       + "     * @param  style the preferred theme style.\n"
                                       + "     * @return       the associated Theme or best match if there is none associated.\n"
                                       + "     */\n"
                                       + "    public static Theme themeForPreferredStyle(final PreferredThemeStyle style) {\n"
                                       + "        return getThemeProvider().getTheme(style);\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Register all themes in array. Registered themes are returned in {@link #getRegisteredThemes()}.\n"
                                       + "     *\n"
                                       + "     * @param themes the themes to register.\n"
                                       + "     */\n"
                                       + "    public static void registerTheme(final Theme... themes) {\n"
                                       + "        if (themes == null) return;\n"
                                       + "        for (Theme theme : themes) {\n"
                                       + "            registerTheme(theme);\n"
                                       + "        }\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Register a theme. Registered themes are returned in {@link #getRegisteredThemes()}.\n"
                                       + "     *\n"
                                       + "     * @param theme the theme to register.\n"
                                       + "     */\n"
                                       + "    public static void registerTheme(final Theme theme) {\n"
                                       + "        registeredThemes.add(theme);\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Remove a register a theme. Registered themes are returned in {@link #getRegisteredThemes()}.\n"
                                       + "     *\n"
                                       + "     * @param theme the theme to register.\n"
                                       + "     */\n"
                                       + "    public static void unregisterTheme(final Theme theme) {\n"
                                       + "        registeredThemes.remove(theme);\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Get all currently registered themes.\n"
                                       + "     *\n"
                                       + "     * @return all themes currently registered as array.\n"
                                       + "     */\n"
                                       + "    public static Theme[] getRegisteredThemes() {\n"
                                       + "        Theme[] themes = registeredThemes.toArray(new Theme[0]);\n"
                                       + "        Arrays.sort(themes);\n"
                                       + "        return themes;\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    public static ComboBoxModel<Theme> getThemeComboBoxModel() {\n"
                                       + "        return new DefaultComboBoxModel<>(getRegisteredThemes());\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Get the current theme. This method will never return null even if the LaF isn#t currently installed.\n"
                                       + "     *\n"
                                       + "     * @return the current theme.\n"
                                       + "     */\n"
                                       + "    public static Theme getTheme() {\n"
                                       + "        if (theme == null) {\n"
                                       + "            setTheme(themeForPreferredStyle(null));\n"
                                       + "        }\n"
                                       + "        return theme;\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Checks whether darklaf is currently installed.\n"
                                       + "     *\n"
                                       + "     * @return true if installed.\n"
                                       + "     */\n"
                                       + "    public static boolean isInstalled() {\n"
                                       + "        return theme != null && UIManager.getLookAndFeel() instanceof DarkLaf;\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Set the current theme.\n"
                                       + "     *\n"
                                       + "     * @param theme The theme to use.\n"
                                       + "     */\n"
                                       + "    public static void setTheme(final Theme theme) {\n"
                                       + "        Theme old = LafManager.theme;\n"
                                       + "        LafManager.theme = theme;\n"
                                       + "        if (old != theme) {\n"
                                       + "            eventSupport.dispatchEvent(new ThemeChangeEvent(old, theme), ThemeChangeListener::themeChanged);\n"
                                       + "        }\n"
                                       + "        if (ThemeSettings.isInitialized()) ThemeSettings.getInstance().refresh();\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Install the theme reported by the {@link ThemePreferenceChangeEvent}.\n"
                                       + "     *\n"
                                       + "     * @param changeEvent the change event.\n"
                                       + "     */\n"
                                       + "    public static void installTheme(final ThemePreferenceChangeEvent changeEvent) {\n"
                                       + "        setTheme(changeEvent.getPreferredThemeStyle());\n"
                                       + "        install();\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Install the theme suited for the given preferred theme style.\n"
                                       + "     *\n"
                                       + "     * @param preferredThemeStyle the preferred theme style.\n"
                                       + "     */\n"
                                       + "    public static void installTheme(final PreferredThemeStyle preferredThemeStyle) {\n"
                                       + "        setTheme(preferredThemeStyle);\n"
                                       + "        install();\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Sets the theme suited for the given preferred theme style.\n"
                                       + "     *\n"
                                       + "     * @param preferredThemeStyle the preferred theme style.\n"
                                       + "     */\n"
                                       + "    public static void setTheme(final PreferredThemeStyle preferredThemeStyle) {\n"
                                       + "        setTheme(themeForPreferredStyle(preferredThemeStyle));\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Sets the current theme and installs the LaF. If the LaF is already installed the theme is switched. This behaves\n"
                                       + "     * exactly like {@link #setTheme(Theme)} followed by {@link #install()}\n"
                                       + "     *\n"
                                       + "     * @param theme the theme to install.\n"
                                       + "     */\n"
                                       + "    public static void installTheme(final Theme theme) {\n"
                                       + "        if (theme == getTheme()) return;\n"
                                       + "        setTheme(theme);\n"
                                       + "        install();\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Reloads the theme. Forces all properties to be reloaded.\n"
                                       + "     */\n"
                                       + "    public static void reloadTheme() {\n"
                                       + "        setTheme(getTheme().copy());\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Overload for {@link #installTheme(Theme)}.\n"
                                       + "     *\n"
                                       + "     * @param theme the theme to install.\n"
                                       + "     * @see         #installTheme(Theme) installTheme().\n"
                                       + "     */\n"
                                       + "    public static void install(final Theme theme) {\n"
                                       + "        installTheme(theme);\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Install the current theme. If no theme is installed, the default is {@link DarculaTheme}. This sets the current\n"
                                       + "     * LaF and applies the given theme.\n"
                                       + "     */\n"
                                       + "    public static void install() {\n"
                                       + "        try {\n"
                                       + "            getTheme();\n"
                                       + "            UIManager.setLookAndFeel(DarkLaf.class.getCanonicalName());\n"
                                       + "            updateLaf();\n"
                                       + "            SwingUtilities.invokeLater(() -> eventSupport.dispatchEvent(new ThemeChangeEvent(null, getTheme()),\n"
                                       + "                                                                        ThemeChangeListener::themeInstalled));\n"
                                       + "        } catch (final ClassNotFoundException\n"
                                       + "                       | InstantiationException\n"
                                       + "                       | IllegalAccessException\n"
                                       + "                       | UnsupportedLookAndFeelException e) {\n"
                                       + "            e.printStackTrace();\n"
                                       + "        }\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Update the component ui classes for all current windows.\n"
                                       + "     */\n"
                                       + "    public static void updateLaf() {\n"
                                       + "        for (final Window w : Window.getWindows()) {\n"
                                       + "            updateLafRecursively(w);\n"
                                       + "        }\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    private static void updateLafRecursively(final Window window) {\n"
                                       + "        for (final Window childWindow : window.getOwnedWindows()) {\n"
                                       + "            updateLafRecursively(childWindow);\n"
                                       + "        }\n"
                                       + "        SwingUtilities.updateComponentTreeUI(window);\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Register a task to modify the ui defaults.\n"
                                       + "     *\n"
                                       + "     * @param task the defaults init task.\n"
                                       + "     */\n"
                                       + "    public static void registerDefaultsAdjustmentTask(final DefaultsAdjustmentTask task) {\n"
                                       + "        uiDefaultsTasks.add(task);\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Remove a registered task to modify the ui defaults.\n"
                                       + "     *\n"
                                       + "     * @param task the defaults init task.\n"
                                       + "     */\n"
                                       + "    public static void removeDefaultsAdjustmentTask(final DefaultsAdjustmentTask task) {\n"
                                       + "        uiDefaultsTasks.remove(task);\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Get a view of all currently registered defaults init tasks. Modification will also mutate the collection itself.\n"
                                       + "     *\n"
                                       + "     * @return collection of init tasks.\n"
                                       + "     */\n"
                                       + "    public static Collection<DefaultsAdjustmentTask> getUserDefaultsAdjustmentTasks() {\n"
                                       + "        return uiDefaultsTasks;\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Register a task to modify the laf defaults.\n"
                                       + "     *\n"
                                       + "     * @param task the defaults init task.\n"
                                       + "     */\n"
                                       + "    public static void registerInitTask(final DefaultsInitTask task) {\n"
                                       + "        uiInitTasks.add(task);\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Remove a registered task to modify the laf defaults.\n"
                                       + "     *\n"
                                       + "     * @param task the defaults init task.\n"
                                       + "     */\n"
                                       + "    public static void removeInitTask(final DefaultsInitTask task) {\n"
                                       + "        uiInitTasks.remove(task);\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Get a view of all currently registered ui init tasks. Modification will also mutate the collection itself.\n"
                                       + "     *\n"
                                       + "     * @return collection of init tasks.\n"
                                       + "     */\n"
                                       + "    public static Collection<DefaultsInitTask> getUserInitTasks() {\n"
                                       + "        return uiInitTasks;\n"
                                       + "    }\n"
                                       + "\n"
                                       + "    /**\n"
                                       + "     * Get the closest match of a registered theme for the given theme.\n"
                                       + "     *\n"
                                       + "     * @param  theme the theme to match to.\n"
                                       + "     * @return       the closes match. NonNull.\n"
                                       + "     */\n"
                                       + "    public static Theme getClosestMatchForTheme(final Theme theme) {\n"
                                       + "        if (theme == null) return themeForPreferredStyle(null);\n"
                                       + "        for (Theme registered : getRegisteredThemes()) {\n"
                                       + "            if (registered.equals(theme)) return registered;\n"
                                       + "        }\n"
                                       + "        for (Theme registered : getRegisteredThemes()) {\n"
                                       + "            if (registered.getThemeClass().equals(theme.getThemeClass())) return registered;\n"
                                       + "        }\n"
                                       + "        return themeForPreferredStyle(null);\n"
                                       + "    }\n"
                                       + "}\n";
}
